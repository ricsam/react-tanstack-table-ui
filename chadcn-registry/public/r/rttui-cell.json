{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rttui-cell",
  "type": "registry:component",
  "title": "Cell",
  "description": "A simple cell",
  "dependencies": [
    "@rttui/core"
  ],
  "registryDependencies": [
    "https://rttui-chadcn-registry.vercel.app/r/rttui-cell-text.json",
    "https://rttui-chadcn-registry.vercel.app/r/rttui-cell-text-bold.json",
    "https://rttui-chadcn-registry.vercel.app/r/rttui-checkbox.json",
    "https://rttui-chadcn-registry.vercel.app/r/rttui-expand-button.json",
    "https://rttui-chadcn-registry.vercel.app/r/rttui-row-pin-buttons.json"
  ],
  "files": [
    {
      "path": "registry/new-york/rttui/rttui-cell.tsx",
      "content": "import { shallowEqual, useRowProps, useRowRef } from \"@rttui/core\";\nimport { CellText } from \"@/registry/new-york/rttui/rttui-cell-text\";\nimport { CellTextBold } from \"@/registry/new-york/rttui/rttui-cell-text-bold\";\nimport { Checkbox } from \"@/registry/new-york/rttui/rttui-checkbox\";\nimport { ExpandButton } from \"@/registry/new-york/rttui/rttui-expand-button\";\nimport { RowPinButtons } from \"@/registry/new-york/rttui/rttui-row-pin-buttons\";\n\nexport function Cell({\n  children,\n  checkbox,\n  expandButton,\n  pinButtons,\n  highlightSelected,\n}: {\n  children?: React.ReactNode;\n  checkbox?: boolean;\n  expandButton?: boolean;\n  pinButtons?: boolean;\n  highlightSelected?: boolean;\n}) {\n  const { depth, checked } = useRowProps({\n    callback: (vrow) => {\n      const row = vrow.row;\n      return {\n        depth: row.depth,\n        checked: row.getIsSelected(),\n      };\n    },\n    areCallbackOutputEqual: shallowEqual,\n    dependencies: [{ type: \"tanstack_table\" }],\n  });\n  const rowRef = useRowRef();\n  return (\n    <div\n      className=\"flex items-center gap-2 flex-1 flex-shrink-0\"\n      style={{ paddingLeft: `${depth * 20}px` }}\n    >\n      {checkbox && (\n        <Checkbox\n          getProps={() => {\n            const row = rowRef()?.row;\n            if (!row) {\n              return {};\n            }\n            return {\n              checked: row.getIsSelected(),\n              disabled: !row.getCanSelect(),\n              indeterminate: row.getIsSomeSelected(),\n            };\n          }}\n          onChange={() => {\n            return () => {\n              const row = rowRef()?.row;\n              if (!row) {\n                return;\n              }\n              return row.toggleSelected();\n            };\n          }}\n        />\n      )}\n\n      {expandButton && <ExpandButton />}\n      {/* Name content */}\n      {highlightSelected && checked ? (\n        <CellTextBold className=\"text-primary\">\n          {children}\n        </CellTextBold>\n      ) : (\n        <CellText>{children}</CellText>\n      )}\n      <div className=\"flex-1\" />\n      {pinButtons && (\n        <>\n          <RowPinButtons />\n        </>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}