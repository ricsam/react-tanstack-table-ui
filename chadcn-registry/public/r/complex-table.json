{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "complex-table",
  "type": "registry:component",
  "title": "Complex Table",
  "description": "A complex table showing hooks, libs and components.",
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/complex-table/page.tsx",
      "content": "import { ComplexTable } from \"@/registry/new-york/blocks/complex-table/components/complex-table\";\n\nexport default function Page() {\n  return <ComplexTable />;\n}\n",
      "type": "registry:page",
      "target": "app/rttui/page.tsx"
    },
    {
      "path": "registry/new-york/blocks/complex-table/components/complex-table.tsx",
      "content": "\"use client\";\nimport { AutoSizer, ReactTanstackTableUi } from \"@rttui/core\";\nimport { cn } from \"@/lib/utils\";\nimport { useTable } from \"@/registry/new-york/blocks/complex-table/hooks/use-table\";\nimport { Skin } from \"@/registry/new-york/rttui/skin\";\n\nexport function ComplexTable({ className }: { className?: string }) {\n  const { table } = useTable();\n  return (\n    <div className={cn(\"h-full w-full\", className)}>\n      <AutoSizer\n        style={{\n          flex: 1,\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        <ReactTanstackTableUi\n          table={table}\n          skin={Skin}\n          autoCrushColumns\n          crushMinSizeBy=\"both\"\n          autoCrushNumCols={50}\n        />\n      </AutoSizer>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/complex-table/lib/generate-table-data.ts",
      "content": "export type User = {\n  id: string;\n  fullName: string;\n  email: string;\n  location: string;\n  city: string;\n  address: string;\n  country: string;\n  continent: string;\n  language: string;\n  countryCode: string;\n  favoriteGame: string;\n  birthMonth: string;\n  birthYear: number;\n  isActive: boolean;\n  yearlyWinnings: {\n    2019: number;\n    2020: number;\n    2021: number;\n    2022: number;\n    2023: number;\n    2024: number;\n  };\n  experienceYears: number;\n  rating: number;\n  completedProjects: number;\n  department: string;\n  jobTitle: string;\n  salary: number;\n  hireDate: string;\n  phoneNumber: string;\n  teamName: string;\n  performanceScore: number;\n  otherCountries: User[];\n};\n\n// Seeded random number generator\nclass SeededRandom {\n  private seed: number;\n\n  constructor(seed?: number) {\n    this.seed = seed || Math.floor(Math.random() * 1000000);\n  }\n\n  // Generate a random number between 0 and 1\n  next(): number {\n    this.seed = (this.seed * 9301 + 49297) % 233280;\n    return this.seed / 233280;\n  }\n\n  // Get a random integer between min and max (inclusive)\n  nextInt(min: number, max: number): number {\n    return Math.floor(this.next() * (max - min + 1)) + min;\n  }\n\n  // Get a random element from an array\n  pickFrom<T>(array: T[]): T {\n    return array[this.nextInt(0, array.length - 1)];\n  }\n}\n\nexport function generateTableData({\n  maxRows,\n  levels,\n  parentId,\n  numRowsRef = { val: 0 },\n  localRows = maxRows,\n  seed,\n}: {\n  maxRows: number;\n  levels?: number;\n  parentId?: string;\n  localRows?: number;\n  numRowsRef?: { val: number };\n  seed?: number;\n}): User[] {\n  // Create a seeded random generator\n  const random = new SeededRandom(seed);\n\n  if (numRowsRef.val > maxRows) {\n    return [];\n  }\n\n  // Cities mapped to countries\n  const citiesByCountry: Record<string, string[]> = {\n    \"Ireland\": [\"Dublin\", \"Cork\", \"Galway\", \"Limerick\", \"Waterford\"],\n    \"Spain\": [\"Madrid\", \"Barcelona\", \"Valencia\", \"Seville\", \"Bilbao\"],\n    \"United Kingdom\": [\"London\", \"Manchester\", \"Edinburgh\", \"Glasgow\", \"Liverpool\"],\n    \"France\": [\"Paris\", \"Marseille\", \"Lyon\", \"Toulouse\", \"Nice\"],\n    \"Germany\": [\"Berlin\", \"Munich\", \"Hamburg\", \"Frankfurt\", \"Cologne\"],\n    \"Sweden\": [\"Stockholm\", \"Gothenburg\", \"Malmö\", \"Uppsala\", \"Linköping\"],\n    \"Italy\": [\"Rome\", \"Milan\", \"Naples\", \"Turin\", \"Florence\"],\n    \"Greece\": [\"Athens\", \"Thessaloniki\", \"Patras\", \"Heraklion\", \"Larissa\"],\n    \"Brazil\": [\"São Paulo\", \"Rio de Janeiro\", \"Brasília\", \"Salvador\", \"Fortaleza\"],\n    \"Argentina\": [\"Buenos Aires\", \"Córdoba\", \"Rosario\", \"Mendoza\", \"La Plata\"],\n  };\n\n  // Street types\n  const streetTypes = [\"Street\", \"Avenue\", \"Boulevard\", \"Road\", \"Lane\", \"Drive\", \"Way\", \"Place\", \"Court\"];\n  \n  const countries = [\n    { country: \"Ireland\", continent: \"Europe\", language: \"English\" },\n    { country: \"Spain\", continent: \"Europe\", language: \"Spanish\" },\n    { country: \"United Kingdom\", continent: \"Europe\", language: \"English\" },\n    { country: \"France\", continent: \"Europe\", language: \"French\" },\n    { country: \"Germany\", continent: \"Europe\", language: \"German\" },\n    { country: \"Sweden\", continent: \"Europe\", language: \"Swedish\" },\n    { country: \"Italy\", continent: \"Europe\", language: \"Italian\" },\n    { country: \"Greece\", continent: \"Europe\", language: \"Greek\" },\n    { country: \"Brazil\", continent: \"South America\", language: \"Portuguese\" },\n    { country: \"Argentina\", continent: \"South America\", language: \"Spanish\" },\n  ];\n  \n  const countryCodes: Record<string, string> = {\n    Ireland: \"ie\",\n    Spain: \"es\",\n    \"United Kingdom\": \"gb\",\n    France: \"fr\",\n    Germany: \"de\",\n    Sweden: \"se\",\n    Italy: \"it\",\n    Greece: \"gr\",\n    Brazil: \"br\",\n    Argentina: \"ar\",\n  };\n  \n  const games = [\n    \"Chess\",\n    \"Backgammon\",\n    \"Checkers\",\n    \"Othello\",\n    \"Stratego\",\n    \"Go\",\n    \"Gipf\",\n    \"Senet\",\n    \"Shogi\",\n    \"Xiangqi\",\n  ];\n  \n  const firstNames = [\n    \"Tony\",\n    \"Andrew\",\n    \"Kevin\",\n    \"Sophie\",\n    \"Isabelle\",\n    \"Emily\",\n    \"Olivia\",\n    \"Lily\",\n    \"Jessica\",\n    \"Ava\",\n    \"Noah\",\n    \"Liam\",\n    \"Emma\",\n    \"Oliver\",\n    \"Charlotte\",\n    \"Elijah\",\n    \"Amelia\",\n    \"James\",\n    \"Mia\",\n    \"William\"\n  ];\n  \n  const lastNames = [\n    \"Smith\",\n    \"Connell\",\n    \"Flanagan\",\n    \"Black\",\n    \"Beckham\",\n    \"Brennan\",\n    \"Brock\",\n    \"Fisher\",\n    \"Grady\",\n    \"Hunter\",\n    \"Johnson\",\n    \"Williams\",\n    \"Brown\",\n    \"Jones\",\n    \"Garcia\",\n    \"Miller\",\n    \"Davis\",\n    \"Rodriguez\",\n    \"Martinez\",\n    \"Wilson\"\n  ];\n  \n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const jobTitles = [\n    \"Software Engineer\",\n    \"Data Analyst\",\n    \"Product Manager\",\n    \"UX Designer\",\n    \"Marketing Specialist\",\n    \"Sales Representative\",\n    \"HR Coordinator\",\n    \"Financial Analyst\",\n    \"Operations Manager\",\n    \"Customer Success Manager\",\n    \"QA Engineer\",\n    \"DevOps Engineer\",\n    \"Content Strategist\",\n    \"Account Executive\",\n    \"Project Manager\"\n  ];\n\n  const teamNames = [\n    \"Alpha\",\n    \"Innovators\",\n    \"Trailblazers\",\n    \"Phoenix\",\n    \"Titans\",\n    \"Quantum\",\n    \"Falcon\",\n    \"Venture\",\n    \"Horizon\",\n    \"Velocity\"\n  ];\n\n  const data = [];\n  let i = 0;\n  for (; numRowsRef.val < maxRows && i < localRows; ) {\n    const countryInfo = random.pickFrom(countries);\n    const id = `${parentId ? `${parentId}.` : \"\"}${i + 1}`;\n    i += 1;\n    numRowsRef.val += 1;\n    \n    const firstName = random.pickFrom(firstNames);\n    const lastName = random.pickFrom(lastNames);\n    const country = countryInfo.country;\n    const city = random.pickFrom(citiesByCountry[country]);\n    const streetNumber = random.nextInt(1, 999);\n    const streetName = random.pickFrom([\n      \"Oak\", \"Maple\", \"Pine\", \"Cedar\", \"Elm\", \"Willow\", \"Birch\", \"Walnut\", \n      \"Main\", \"High\", \"Park\", \"Mill\", \"Church\", \"School\", \"Lake\", \"River\"\n    ]);\n    const streetType = random.pickFrom(streetTypes);\n    const address = `${streetNumber} ${streetName} ${streetType}`;\n    const domain = random.pickFrom([\"example.com\", \"mail.co\", \"testdata.org\", \"mockup.net\", \"demo.io\"]);\n    const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`;\n    const birthYear = random.nextInt(1970, 2000);\n    \n    const department = random.pickFrom([\n      \"Engineering\",\n      \"Marketing\",\n      \"Finance\",\n      \"HR\",\n      \"Sales\",\n      \"Product\",\n      \"Customer Support\",\n      \"Operations\",\n      \"Legal\",\n      \"Research\"\n    ]);\n    \n    const jobTitle = random.pickFrom(jobTitles);\n    const teamName = random.pickFrom(teamNames);\n    \n    // Generate phone number\n    const areaCode = random.nextInt(100, 999);\n    const prefix = random.nextInt(100, 999);\n    const lineNumber = random.nextInt(1000, 9999);\n    const phoneNumber = `+1-${areaCode}-${prefix}-${lineNumber}`;\n    \n    // Generate hire date\n    const hireYear = random.nextInt(2015, 2023);\n    const hireMonth = random.nextInt(1, 12);\n    const hireDay = random.nextInt(1, 28);\n    const hireDate = `${hireYear}-${hireMonth.toString().padStart(2, '0')}-${hireDay.toString().padStart(2, '0')}`;\n    \n    const performanceScore = random.nextInt(1, 5);\n    const salary = random.nextInt(50000, 200000);\n    \n    const otherCountries =\n      levels === 0\n        ? []\n        : generateTableData({\n            numRowsRef,\n            maxRows,\n            localRows: random.nextInt(0, 5),\n            levels: levels ? levels - 1 : random.nextInt(1, 3),\n            parentId: id,\n            seed: random.nextInt(1, 1000000), // Generate a new seed for child data\n          });\n          \n    data.push({\n      id,\n      fullName: `${firstName} ${lastName}`,\n      email,\n      location: `${city}, ${country}`,\n      city,\n      address,\n      country: countryInfo.country,\n      continent: countryInfo.continent,\n      language: countryInfo.language,\n      countryCode: countryCodes[countryInfo.country],\n      favoriteGame: random.pickFrom(games),\n      birthMonth: random.pickFrom(months),\n      birthYear,\n      isActive: random.next() > 0.5,\n      yearlyWinnings: {\n        2019: random.nextInt(1000, 5000),\n        2020: random.nextInt(1000, 5000),\n        2021: random.nextInt(1000, 5000),\n        2022: random.nextInt(1000, 5000),\n        2023: random.nextInt(1000, 5000),\n        2024: random.nextInt(1000, 5000),\n      },\n      experienceYears: random.nextInt(1, 20),\n      rating: random.nextInt(1, 10),\n      completedProjects: random.nextInt(0, 50),\n      department,\n      jobTitle,\n      salary,\n      hireDate,\n      phoneNumber,\n      teamName,\n      performanceScore,\n      otherCountries,\n    });\n  }\n\n  return data;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/blocks/complex-table/hooks/use-table.tsx",
      "content": "\"use client\";\nimport { decorateColumnHelper, iterateOverColumns } from \"@rttui/core\";\nimport {\n  ColumnDef,\n  ColumnOrderState,\n  createColumnHelper,\n  getCoreRowModel,\n  getExpandedRowModel,\n  getFilteredRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport React from \"react\";\nimport {\n  generateTableData,\n  User,\n} from \"@/registry/new-york/blocks/complex-table/lib/generate-table-data\";\nimport { Cell } from \"@/registry/new-york/rttui/cell\";\nimport { Filter } from \"@/registry/new-york/rttui/filter\";\nimport { Header } from \"@/registry/new-york/rttui/header\";\n\nconst columnHelper = decorateColumnHelper(createColumnHelper<User>(), {\n  header: (original, context) => {\n    return (\n      <Header\n        resizer\n        sorting\n        options\n        checkbox={context.column.id.endsWith(\"full-name\")}\n      >\n        {original}\n      </Header>\n    );\n  },\n  filter: () => <Filter />,\n  cell: (original, context) => {\n    if (context.column.id.endsWith(\"full-name\")) {\n      return original;\n    }\n    return <Cell>{original}</Cell>;\n  },\n});\n\nconst columns: ColumnDef<User, any>[] = [\n  // Combined column with all controls\n  columnHelper.accessor(\"fullName\", {\n    id: \"full-name\",\n    header: \"Full Name\",\n    cell: ({ getValue }) => (\n      <Cell checkbox expandButton pinButtons>\n        {getValue()}\n      </Cell>\n    ),\n    size: 300, // Increased size to accommodate all controls\n    filterFn: \"includesString\",\n  }),\n\n  // Rest of the columns\n  columnHelper.accessor(\"email\", {\n    header: \"Email\",\n    cell: (info) => info.getValue(),\n    id: \"email\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"location\", {\n    header: \"Location\",\n    cell: (info) => info.getValue(),\n    id: \"location\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"city\", {\n    header: \"City\",\n    cell: (info) => info.getValue(),\n    id: \"city\",\n    size: 150,\n  }),\n  columnHelper.accessor(\"address\", {\n    header: \"Address\",\n    cell: (info) => info.getValue(),\n    id: \"address\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"country\", {\n    header: \"Country\",\n    cell: (info) => info.getValue(),\n    id: \"country\",\n  }),\n  columnHelper.accessor(\"continent\", {\n    header: \"Continent\",\n    cell: (info) => info.getValue(),\n    id: \"continent\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"countryCode\", {\n    header: \"Country Code\",\n    cell: (info) => info.getValue(),\n    id: \"country-code\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"language\", {\n    header: \"Language\",\n    cell: (info) => info.getValue(),\n    id: \"language\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"favoriteGame\", {\n    header: \"Favorite Game\",\n    cell: (info) => info.getValue(),\n    id: \"favorite-game\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"birthMonth\", {\n    header: \"Birth Month\",\n    cell: (info) => info.getValue(),\n    id: \"birth-month\",\n    size: 120,\n  }),\n  columnHelper.accessor(\"birthYear\", {\n    header: \"Birth Year\",\n    cell: (info) => info.getValue(),\n    id: \"birth-year\",\n    size: 120,\n  }),\n  columnHelper.accessor(\"isActive\", {\n    header: \"Active\",\n    cell: (info) => (info.getValue() ? \"Yes\" : \"No\"),\n    id: \"is-active\",\n    size: 100,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2019], {\n    id: \"winnings-2019\",\n    header: \"2019\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2020], {\n    id: \"winnings-2020\",\n    header: \"2020\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2021], {\n    id: \"winnings-2021\",\n    header: \"2021\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2022], {\n    id: \"winnings-2022\",\n    header: \"2022\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2023], {\n    id: \"winnings-2023\",\n    header: \"2023\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor((data) => data.yearlyWinnings[2024], {\n    id: \"winnings-2024\",\n    header: \"2024\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    size: 120,\n  }),\n  columnHelper.accessor(\"experienceYears\", {\n    header: \"Experience (Years)\",\n    cell: (info) => info.getValue(),\n    id: \"experience-years\",\n    size: 150,\n  }),\n  columnHelper.accessor(\"rating\", {\n    header: \"Rating\",\n    cell: (info) => info.getValue().toFixed(1),\n    id: \"rating\",\n    size: 100,\n  }),\n  columnHelper.accessor(\"completedProjects\", {\n    header: \"Completed Projects\",\n    cell: (info) => info.getValue(),\n    id: \"completed-projects\",\n    size: 150,\n  }),\n  columnHelper.accessor(\"department\", {\n    header: \"Department\",\n    cell: (info) => info.getValue(),\n    id: \"department\",\n    size: 150,\n  }),\n  columnHelper.accessor(\"jobTitle\", {\n    header: \"Job Title\",\n    cell: (info) => info.getValue(),\n    id: \"job-title\",\n    size: 200,\n  }),\n  columnHelper.accessor(\"teamName\", {\n    header: \"Team\",\n    cell: (info) => info.getValue(),\n    id: \"team-name\",\n    size: 120,\n  }),\n  columnHelper.accessor(\"salary\", {\n    header: \"Salary\",\n    cell: (info) => `$${info.getValue().toLocaleString()}`,\n    id: \"salary\",\n    size: 120,\n  }),\n  columnHelper.accessor(\"hireDate\", {\n    header: \"Hire Date\",\n    cell: (info) => info.getValue(),\n    id: \"hire-date\",\n    size: 120,\n  }),\n  columnHelper.accessor(\"phoneNumber\", {\n    header: \"Phone Number\",\n    cell: (info) => info.getValue(),\n    id: \"phone-number\",\n    size: 150,\n  }),\n  columnHelper.accessor(\"performanceScore\", {\n    header: \"Performance\",\n    cell: (info) => {\n      const score = info.getValue();\n      const stars = \"★\".repeat(score) + \"☆\".repeat(5 - score);\n      return <span title={`${score}/5`}>{stars}</span>;\n    },\n    id: \"performance-score\",\n    size: 120,\n  }),\n];\n\nexport const useTable = () => {\n  const [data, setData] = React.useState<User[]>(() =>\n    // Use a fixed seed for consistent test data\n    generateTableData({ maxRows: 5000, seed: 12345 }),\n  );\n\n  const [columnOrder, setColumnOrder] = React.useState<ColumnOrderState>(() =>\n    iterateOverColumns(columns),\n  );\n  const getSubRows = (row: User) => {\n    return row.otherCountries;\n  };\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      columnOrder,\n      // Store ID in columnVisibility to hide it\n      columnVisibility: {\n        id: false,\n      },\n    },\n    getRowId(originalRow) {\n      return String(originalRow.id);\n    },\n    onColumnOrderChange: setColumnOrder,\n    defaultColumn: {\n      minSize: 60,\n      maxSize: 800,\n    },\n    enableColumnPinning: true,\n    columnResizeMode: \"onChange\",\n    getRowCanExpand: () => true,\n    getExpandedRowModel: getExpandedRowModel(),\n    getCoreRowModel: getCoreRowModel(),\n    getSubRows,\n    enableRowSelection: true,\n    keepPinnedRows: true,\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n  return { data, setData, columnOrder, setColumnOrder, table, getSubRows };\n};\n",
      "type": "registry:hook"
    }
  ]
}