{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "skin",
  "type": "registry:ui",
  "title": "Skin",
  "description": "The table skin",
  "dependencies": [
    "@rttui/core"
  ],
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/rttui/skin.tsx",
      "content": "import type { Skin as RttuiSkin } from \"@rttui/core\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Card } from \"@/registry/new-york/ui/card\";\nimport {\n  shallowEqual,\n  strictEqual,\n  useCellProps,\n  useColProps,\n  useRowProps,\n  useRowRef,\n  useTableContext,\n  useTableCssVars,\n  useTableProps,\n} from \"@rttui/core\";\nimport React, { CSSProperties } from \"react\";\n\nconst TableHeaderCell = React.memo(\n  React.forwardRef<\n    HTMLDivElement,\n    {\n      isMeasureInstance: boolean;\n      children: React.ReactNode;\n    }\n  >(function TableHeaderCell({ isMeasureInstance, children }, ref) {\n    const {\n      isSomeColumnsPinnedRight,\n      headerId,\n      isPinned,\n      width,\n      isLast,\n      isLastPinned,\n      isLastCenter,\n      columnId,\n    } = useColProps({\n      callback: ({ vheader, selectorValue }) => {\n        const state = vheader.state;\n        const headerId = vheader.header.id;\n        const width = state.width;\n\n        return {\n          isSomeColumnsPinnedRight:\n            selectorValue.tanstackTable.getIsSomeColumnsPinned(\"right\"),\n          headerId,\n          isPinned: state.isPinned,\n          width,\n          isLast: state.isLast,\n          isLastPinned: state.isLastPinned,\n          isLastCenter: state.isLastCenter,\n          columnId: vheader.header.column.id,\n        };\n      },\n      dependencies: [{ type: \"tanstack_table\" }],\n      areCallbackOutputEqual: shallowEqual,\n    });\n\n    return (\n      <div\n        className={cn(\n          \"box-border shrink-0 th relative flex items-center px-2 py-3.5 text-sm font-semibold text-foreground overflow-hidden whitespace-nowrap bg-transparent hover:bg-accent\",\n          ((isPinned === \"start\" && !isLastPinned) || !isPinned) &&\n            !isLast &&\n            !(isLastCenter && isSomeColumnsPinnedRight)\n            ? \"border-r border-r-border\"\n            : undefined,\n          isPinned === \"end\" && !isLastPinned\n            ? \"border-l border-l-border\"\n            : undefined,\n        )}\n        data-header-id={headerId}\n        data-is-pinned={isPinned}\n        data-column-id={columnId}\n        ref={ref}\n        style={{\n          height: \"var(--header-row-height)\",\n          width: isMeasureInstance ? \"auto\" : width,\n          zIndex: isPinned ? 11 : 10,\n        }}\n      >\n        <div className=\"flex-1 flex justify-start\">{children}</div>\n      </div>\n    );\n  }),\n);\n\nexport const Skin: RttuiSkin = {\n  rowHeight: 36,\n  headerRowHeight: 56,\n  footerRowHeight: 56,\n  OverlayContainer: ({ children }) => {\n    const { width, height } = useTableProps({\n      selector: (props) => props.uiProps,\n      callback: ({ width, height }) => {\n        return {\n          width,\n          height,\n        };\n      },\n      dependencies: [{ type: \"ui_props\" }],\n      areCallbackOutputEqual: shallowEqual,\n    });\n    const cssVars = useTableCssVars();\n    return (\n      <Card\n        className=\"rttui-overlay-container relative overflow-hidden rounded-md p-0\"\n        style={{\n          width: width + \"px\",\n          height: height + \"px\",\n          ...cssVars,\n        }}\n      >\n        {children}\n      </Card>\n    );\n  },\n  OuterContainer: ({ children }) => {\n    const { tableContainerRef } = useTableContext();\n    return (\n      <div\n        ref={tableContainerRef}\n        className=\"outer-container relative overflow-auto text-foreground bg-background\"\n        style={{\n          width: \"var(--table-container-width)\",\n          height: \"var(--table-container-height)\",\n          contain: \"strict\",\n          willChange: \"scroll-position\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n  TableScroller: () => {\n    return (\n      <div\n        className=\"table-scroller absolute\"\n        style={{\n          width: \"var(--table-width)\",\n          height:\n            \"calc(var(--table-height) + var(--header-height) + var(--footer-height))\",\n        }}\n      ></div>\n    );\n  },\n  TableHeader: ({ children }) => {\n    return (\n      <div\n        className=\"thead sticky top-0 z-10 bg-card\"\n        style={{\n          width: \"var(--table-width)\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n  TableFooter: ({ children }) => {\n    return (\n      <div\n        className=\"table-footer sticky bottom-[-1px] z-10 bg-card border-t border-t-border\"\n        style={{\n          width: \"var(--table-width)\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n  HeaderRow: ({ children }) => {\n    return (\n      <div\n        className=\"flex border-b border-b-border box-border\"\n        style={{\n          height: \"var(--header-row-height)\",\n          willChange: \"contents\",\n        }}\n      >\n        <div className={cn(\"absolute inset-y-0 left-0 w-0.5\")} />\n        {children}\n      </div>\n    );\n  },\n  HeaderCell: TableHeaderCell,\n  TableBody: ({ children }) => {\n    return (\n      <div\n        className=\"table-body relative flex flex-col items-stretch justify-start bg-background\"\n        style={{\n          width: \"var(--table-width)\",\n          height: \"var(--table-height)\",\n          willChange: \"contents\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n  PinnedRows: ({ children, position }) => {\n    const style: React.CSSProperties = {};\n\n    if (position === \"top\") {\n      style.top = \"var(--header-height)\";\n      style.boxShadow =\n        \"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)\";\n    } else if (position === \"bottom\") {\n      style.bottom = \"var(--footer-height)\";\n      style.boxShadow =\n        \"0 -4px 6px -1px rgba(0, 0, 0, 0.1), 0 -2px 4px -1px rgba(0, 0, 0, 0.06)\";\n    }\n\n    return (\n      <div\n        className={`sticky-${position}-rows bg-card sticky z-10`}\n        style={style}\n      >\n        {children}\n      </div>\n    );\n  },\n  PinnedCols: ({ children, position, type }) => {\n    const style: React.CSSProperties = {\n      position: \"sticky\",\n      zIndex: 20,\n      display: \"flex\",\n    };\n\n    if (position === \"left\") {\n      style.left = 0;\n    } else if (position === \"right\") {\n      style.right = 0;\n    }\n\n    return (\n      <div\n        className={type !== \"body\" ? `sticky-${position}-cols bg-card` : \"\"}\n        style={style}\n      >\n        {children}\n      </div>\n    );\n  },\n  TableRowWrapper: React.forwardRef(function TableRowWrapper(\n    { children, relativeIndex: flatIndex },\n    ref,\n  ) {\n    return (\n      <div data-index={flatIndex} ref={ref}>\n        {children}\n      </div>\n    );\n  }),\n  TableRow: ({ children, relativeIndex: flatIndex }) => {\n    const { canSelect } = useRowProps({\n      callback: (row) => {\n        return {\n          canSelect: row.row.getCanSelect(),\n        };\n      },\n      dependencies: [{ type: \"tanstack_table\" }],\n      areCallbackOutputEqual: shallowEqual,\n    });\n    const rowRef = useRowRef();\n    return (\n      <div\n        className={cn(\n          \"relative flex group/row box-border z-1\",\n          \"border-b border-b-border\",\n          flatIndex % 2 === 0 ? \"bg-background even\" : \"bg-muted odd\",\n          \"hover:bg-[#E3F2FD] dark:hover:bg-[#3a473a]\",\n          canSelect && \"cursor-pointer\",\n        )}\n        onClick={\n          !canSelect\n            ? undefined\n            : () => {\n                rowRef()?.row.toggleSelected();\n              }\n        }\n        style={{\n          width: \"var(--table-width)\",\n          height: \"var(--row-height)\",\n          willChange: \"contents\",\n        }}\n      >\n        {children}\n      </div>\n    );\n  },\n  TableRowExpandedContent: ({ children }) => {\n    return (\n      <div className=\"expanded-row bg-background border-b border-b-border\">\n        {children}\n      </div>\n    );\n  },\n  Cell: React.memo(\n    React.forwardRef(function Cell({ isMeasureInstance, children }, ref) {\n      const {\n        isFirst,\n        isPinned,\n        isLastPinned,\n        isLast,\n        isLastCenter,\n        width,\n        columnId,\n      } = useCellProps({\n        callback: (cell) => {\n          const state = cell.header.state;\n          return {\n            isFirst: state.isFirst,\n            isPinned: state.isPinned,\n            isLastPinned: state.isLastPinned,\n            width: state.width,\n            columnId: cell.header.header.column.id,\n            isLast: state.isLast,\n            isLastCenter: state.isLastCenter,\n          };\n        },\n        areCallbackOutputEqual: shallowEqual,\n        dependencies: [{ type: \"tanstack_table\" }],\n      });\n\n      const { selected, isSomeColumnsPinnedRight } = useRowProps({\n        callback: (row, table) => {\n          const selected = row.row.getIsSelected();\n          return {\n            selected,\n            isSomeColumnsPinnedRight:\n              table.tanstackTable.getIsSomeColumnsPinned(\"right\"),\n          };\n        },\n        areCallbackOutputEqual: shallowEqual,\n        dependencies: [{ type: \"tanstack_table\" }],\n      });\n\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            `td flex items-center px-2 py-2 overflow-hidden whitespace-nowrap text-ellipsis`,\n            \"[.even_&]:bg-background [.odd_&]:bg-muted\",\n\n            \"[.even_&]:group-hover/row:bg-[#E3F2FD]\",\n            \"[.odd_&]:group-hover/row:bg-[#E3F2FD]\",\n\n            \"[.even_&]:dark:group-hover/row:bg-[#0e280e]\",\n            \"[.odd_&]:dark:group-hover/row:bg-[#0e280e]\",\n\n            `relative border-b border-b-border`,\n            ((isPinned === \"start\" && !isLastPinned) || !isPinned) &&\n              !isLast &&\n              !(isLastCenter && isSomeColumnsPinnedRight)\n              ? `border-r border-r-border`\n              : undefined,\n            isPinned === \"end\" && !isLastPinned\n              ? `border-l border-l-border`\n              : undefined,\n          )}\n          data-column-id={columnId}\n          style={{\n            height: \"var(--row-height)\",\n            width: isMeasureInstance ? \"auto\" : width,\n            zIndex: isPinned ? 5 : 0,\n            boxSizing: \"border-box\",\n            flexShrink: 0,\n          }}\n        >\n          {isFirst && selected && (\n            <div className=\"absolute left-0 top-0 bottom-0 w-0.5 bg-primary\" />\n          )}\n          {children}\n        </div>\n      );\n    }),\n  ),\n  PinnedColsOverlay: ({ position }) => {\n    const width = useTableProps({\n      callback: (table) => {\n        const isPinned = table.tanstackTable.getIsSomeColumnsPinned(position);\n        if (isPinned) {\n          return position === \"left\"\n            ? table.tanstackTable.getLeftTotalSize()\n            : table.tanstackTable.getRightTotalSize();\n        }\n        return undefined;\n      },\n      dependencies: [{ type: \"tanstack_table\" }],\n      areCallbackOutputEqual: strictEqual,\n    });\n\n    if (width === undefined) {\n      return null;\n    }\n\n    const style: CSSProperties = { width, [position]: 0 };\n\n    if (position === \"left\") {\n      style.boxShadow =\n        \"4px 0 8px -4px rgba(0, 0, 0, 0.15), 6px 0 12px -6px rgba(0, 0, 0, 0.1)\";\n    } else if (position === \"right\") {\n      style.boxShadow =\n        \"-4px 0 8px -4px rgba(0, 0, 0, 0.15), -6px 0 12px -6px rgba(0, 0, 0, 0.1)\";\n    }\n    return (\n      <div\n        className={cn(\n          `pinned-${position}-overlay sticky top-0 bottom-0 z-20 pointer-events-none`,\n          position === \"left\" && \"border-r border-r-border\",\n        )}\n        style={style}\n      />\n    );\n  },\n};\n",
      "type": "registry:component"
    }
  ]
}