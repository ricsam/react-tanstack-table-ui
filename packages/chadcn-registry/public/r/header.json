{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "header",
  "type": "registry:component",
  "title": "Header",
  "description": "A simple header",
  "dependencies": [
    "@rttui/core",
    "lucide-react"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "button",
    "https://rttui-chadcn-registry.vercel.app/r/checkbox.json",
    "https://rttui-chadcn-registry.vercel.app/r/header-pin-buttons.json",
    "https://rttui-chadcn-registry.vercel.app/r/resizer.json"
  ],
  "files": [
    {
      "path": "registry/new-york/rttui/header.tsx",
      "content": "import { Resizer } from \"@/registry/new-york/rttui/resizer\";\nimport {\n  shallowEqual,\n  useColProps,\n  useColRef,\n  useCrushAllCols,\n  useCrushHeader,\n  useTableContext,\n} from \"@rttui/core\";\nimport { Checkbox } from \"@/registry/new-york/rttui/checkbox\";\nimport { HeaderPinButtons } from \"@/registry/new-york/rttui/header-pin-buttons\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york/ui/dropdown-menu\";\nimport {\n  ArrowDown,\n  ArrowUp,\n  ArrowUpDown,\n  Check,\n  MoreHorizontal,\n} from \"lucide-react\";\n\nexport function Header({\n  children,\n  checkbox,\n  pinButtons,\n  resizer,\n  sorting,\n  options,\n}: {\n  children?: React.ReactNode;\n  checkbox?: boolean;\n  pinButtons?: boolean;\n  resizer?: boolean;\n  sorting?: boolean;\n  options?: boolean;\n}) {\n  const tableRef = useTableContext().tableRef;\n  const colRef = useColRef();\n  const { isSorted, sortIndex, canSort } = useColProps({\n    callback: ({ column }) => {\n      return {\n        isSorted: column.getIsSorted(),\n        sortIndex: column.getSortIndex(),\n        canSort: column.getCanSort(),\n      };\n    },\n    areCallbackOutputEqual: shallowEqual,\n    dependencies: [{ type: \"tanstack_table\" }],\n  });\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: \"8px\",\n        flex: \"1\",\n        flexShrink: 0,\n      }}\n    >\n      {checkbox && (\n        <Checkbox\n          getProps={() => {\n            const table = tableRef.current.tanstackTable;\n            return {\n              checked: table.getIsAllRowsSelected(),\n              indeterminate: table.getIsSomeRowsSelected(),\n            };\n          }}\n          onChange={() => {\n            const table = tableRef.current.tanstackTable;\n            return table.getToggleAllRowsSelectedHandler();\n          }}\n        />\n      )}\n\n      {sorting && canSort ? (\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"cursor-pointer\"\n            onClick={(ev) => {\n              const column = colRef().column;\n              const isMulti = ev.shiftKey && column.getCanMultiSort();\n              return column.toggleSorting(undefined, isMulti);\n            }}\n          >\n            {children}\n            {!isSorted ? (\n              <ArrowUpDown className=\"text-muted-foreground\" />\n            ) : isSorted === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ArrowDown />\n            )}\n          </Button>\n        </div>\n      ) : (\n        children\n      )}\n\n      <div style={{ flex: \"1\", flexShrink: 0 }} />\n      {pinButtons && <HeaderPinButtons />}\n      {options && <Options />}\n      {resizer && <Resizer />}\n    </div>\n  );\n}\n\nfunction Options() {\n  const crushHeader = useCrushHeader();\n  const crushAllColumns = useCrushAllCols();\n  const colRef = useColRef();\n  const { isSorted, canSort, isPinned, canPin } = useColProps({\n    callback: ({ column }) => {\n      return {\n        isSorted: column.getIsSorted(),\n        canSort: column.getCanSort(),\n        isPinned: column.getIsPinned(),\n        canPin: column.getCanPin(),\n      };\n    },\n    areCallbackOutputEqual: shallowEqual,\n    dependencies: [{ type: \"tanstack_table\" }],\n  });\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"h-8 w-8 p-0 cursor-pointer\">\n          <span className=\"sr-only\">Open menu</span>\n          <MoreHorizontal />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {canSort && (\n          <>\n            <DropdownMenuItem\n              className=\"flex items-center gap-2 cursor-pointer\"\n              onClick={() => {\n                if (isSorted === \"asc\") {\n                  colRef().column.clearSorting();\n                } else {\n                  colRef().column.toggleSorting(false);\n                }\n              }}\n            >\n              <ArrowUp />\n              Sort ascending\n              {isSorted === \"asc\" && <Check />}\n            </DropdownMenuItem>\n            <DropdownMenuItem\n              className=\"flex items-center gap-2 cursor-pointer\"\n              onClick={() => {\n                if (isSorted === \"desc\") {\n                  colRef().column.clearSorting();\n                } else {\n                  colRef().column.toggleSorting(true);\n                }\n              }}\n            >\n              <ArrowDown />\n              Sort descending\n              {isSorted === \"desc\" && <Check />}\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n          </>\n        )}\n\n        {canPin && (\n          <>\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={() => {\n                if (isPinned === \"left\") {\n                  colRef().column.pin(false);\n                } else {\n                  colRef().column.pin(\"left\");\n                }\n              }}\n            >\n              Pin left\n              {isPinned === \"left\" && <Check />}\n            </DropdownMenuItem>\n            <DropdownMenuItem\n              className=\"cursor-pointer\"\n              onClick={() => {\n                if (isPinned === \"right\") {\n                  colRef().column.pin(false);\n                } else {\n                  colRef().column.pin(\"right\");\n                }\n              }}\n            >\n              Pin right\n              {isPinned === \"right\" && <Check />}\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n          </>\n        )}\n        <DropdownMenuItem\n          className=\"cursor-pointer\"\n          onClick={() => {\n            crushHeader(colRef().header);\n          }}\n        >\n          Autosize this column\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          className=\"cursor-pointer\"\n          onClick={() => {\n            crushAllColumns();\n          }}\n        >\n          Autosize all columns\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}